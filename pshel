Import-Module powershell-yaml
$config = Get-Content -Path "config.yml" | ConvertFrom-Yaml

$globalThresholdMet = $false
$emailBody = ""
$reportedMajorErrors = @{}
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

function Check-FileAge {
    param (
        [string]$file,
        [hashtable]$timeThresholds,
        [ref]$emailBodyRef
    )

    $fileAge = (Get-Date) - (Get-Item $file).LastWriteTime
    $severity = 0

    foreach ($threshold in $timeThresholds.GetEnumerator() | Sort-Object {[int]$_.Name} -Descending) {
        if ($fileAge -gt [TimeSpan]::Parse($threshold.Value)) {
            $severity = [int]$threshold.Name
            break
        }
    }

    if ($severity -gt 0) {
        $details = "File age: $($fileAge.ToString())"
        $emailBodyRef.Value += CheckSeverityThresholds -severity $severity -path $file -details $details
    }

    return $severity
}

function Check-FileCount {
    param (
        [string]$path,
        [hashtable]$countThresholds,
        [string]$fileFilter,
        [ref]$emailBodyRef
    )

    $fileCount = (Get-ChildItem -Path $path -File -Filter $fileFilter).Count
    $severity = 0

    foreach ($threshold in $countThresholds.GetEnumerator() | Sort-Object {[int]$_.Name} -Descending) {
        if ($fileCount -ge $threshold.Value) {
            $severity = [int]$threshold.Name
            break
        }
    }

    if ($severity -gt 0) {
        $details = "File count: $fileCount"
        $emailBodyRef.Value += CheckSeverityThresholds -severity $severity -path $path -details $details
    }

    return $severity
}

function Check-ZeroSizeFiles {
    param (
        [string]$path,
        [int]$zeroSizeSeverity,
        [string]$fileFilter,
        [ref]$emailBodyRef
    )

    $zeroSizeFiles = Get-ChildItem -Path $path -File -Filter $fileFilter | Where-Object { $_.Length -eq 0 }
    
    if ($zeroSizeFiles.Count -gt 0) {
        $details = "Zero-size files found: $($zeroSizeFiles.Count)"
        $emailBodyRef.Value += CheckSeverityThresholds -severity $zeroSizeSeverity -path $path -details $details
        return $zeroSizeSeverity
    }

    return 0
}

function CheckSeverityThresholds {
    param (
        [int]$severity,
        [string]$path,
        [string]$details
    )

    $message = ""
    Write-Output "$timestamp [DEBUG] Checking severity: $severity for path: $path"

    if ($severity -ge 4) {
        $script:globalThresholdMet = $true
        $message = "$timestamp [ERROR] Critical: Severity 4 or higher met in $path - $details`n"
        Write-Output "$timestamp [ERROR] Critical: Severity 4 or higher met in $path"
    }
    elseif ($severity -eq 3) {
        $script:globalThresholdMet = $true
        $message = "$timestamp [ERROR] Severity 3 met in $path - $details`n"
        Write-Output "$timestamp [ERROR] Severity 3 met in $path"
    }
    elseif ($severity -eq 2 -and -not $script:reportedMajorErrors.ContainsKey($path)) {
        Write-Output "$timestamp [ERROR] Major error: Severity 2 met in $path"
        $script:reportedMajorErrors[$path] = $true
    }
    else {
        Write-Output "$timestamp [INFO] No threshold breached for path: $path (Severity: $severity)"
    }

    return $message
}

function Check-Directory {
    param (
        [string]$path,
        [hashtable]$timeThresholds,
        [hashtable]$countThresholds,
        [bool]$checkZeroSize,
        [int]$zeroSizeSeverity,
        [string]$fileFilter,
        [ref]$emailBodyRef
    )

    $maxSeverity = 0

    # Check file count
    $countSeverity = Check-FileCount -path $path -countThresholds $countThresholds -fileFilter $fileFilter -emailBodyRef $emailBodyRef
    $maxSeverity = [Math]::Max($maxSeverity, $countSeverity)

    # Check individual files
    Get-ChildItem -Path $path -File -Filter $fileFilter | ForEach-Object {
        $ageSeverity = Check-FileAge -file $_.FullName -timeThresholds $timeThresholds -emailBodyRef $emailBodyRef
        $maxSeverity = [Math]::Max($maxSeverity, $ageSeverity)
    }

    # Check for zero-size files if enabled
    if ($checkZeroSize) {
        $zeroSizeSeverity = Check-ZeroSizeFiles -path $path -zeroSizeSeverity $zeroSizeSeverity -fileFilter $fileFilter -emailBodyRef $emailBodyRef
        $maxSeverity = [Math]::Max($maxSeverity, $zeroSizeSeverity)
    }

    return $maxSeverity
}

# Main execution loop
foreach ($dir in $config.directory_check) {
    Write-Output "$timestamp [INFO] Checking directory: $($dir.path)"
    $maxSeverity = Check-Directory -path $dir.path `
                    -timeThresholds $dir.time_thresholds `
                    -countThresholds $dir.count_thresholds `
                    -checkZeroSize $dir.check_zero_size `
                    -zeroSizeSeverity $dir.zero_size_severity `
                    -fileFilter $dir.file_filter `
                    -emailBodyRef ([ref]$emailBody)

    Write-Output "$timestamp [INFO] Max severity for $($dir.path): $maxSeverity"
}

# Check if the global threshold was met and provide summary
if ($globalThresholdMet) {
    Write-Output "$timestamp [ERROR] Checks completed. Thresholds met."
} else {
    Write-Output "$timestamp [INFO] Checks completed. All thresholds are within acceptable limits."
}

# Always write out the email body
Write-Output "Email body:`n$emailBody"