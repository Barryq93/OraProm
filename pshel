# Program 1 - Directory Check

# Import the YAML module for parsing the configuration file
Import-Module powershell-yaml

# Read the configuration file
$config = Get-Content -Path "config.yml" | ConvertFrom-Yaml

<#
.SYNOPSIS
Checks the number of files in a directory against specified thresholds.

.DESCRIPTION
This function counts the files in the specified directory that match the given file filter
and compares the count against the provided thresholds. It reports any breached thresholds
along with their severities.

.PARAMETER path
The directory path to check.

.PARAMETER countThresholds
An array of threshold objects, each containing 'count' and 'severity' properties.

.PARAMETER fileFilter
A file filter string (e.g., "*.xml") to limit which files are checked.

.OUTPUTS
Returns the total file count and writes threshold breach information to the console.
#>
function Check-FileCount {
    param (
        [string]$path,
        [array]$countThresholds,
        [string]$fileFilter
    )

    # Get the total number of files in the directory that match the filter
    $fileCount = (Get-ChildItem -Path $path -File -Filter $fileFilter).Count
    $breachedThresholds = @()

    # Check each threshold against the file count
    foreach ($threshold in $countThresholds) {
        if ($fileCount -ge $threshold.count) {
            $breachedThresholds += $threshold
        }
    }

    # If any thresholds were breached, report the details
    if ($breachedThresholds.Count -gt 0) {
        $highestSeverity = ($breachedThresholds | Sort-Object severity | Select-Object -First 1).severity
        $highestCount = ($breachedThresholds | Sort-Object count -Descending | Select-Object -First 1).count
        
        Write-Output "Directory: $path (Filter: $fileFilter)"
        Write-Output "  Total files: $fileCount"
        Write-Output "  Highest Count Severity: $highestSeverity (Threshold: $highestCount files)"
        
        $breachedThresholds | ForEach-Object {
            Write-Output "  Breached: $($_.count) files (Severity: $($_.severity))"
        }
        Write-Output ""
    }

    return $fileCount
}

<#
.SYNOPSIS
Checks the age of files in a directory against specified time thresholds.

.DESCRIPTION
This function examines each file in the specified directory that matches the given file filter
and compares its age against the provided time thresholds. It reports any files that exceed the thresholds.

.PARAMETER path
The directory path to check.

.PARAMETER timeThresholds
An array of threshold objects, each containing 'minutes' and 'severity' properties.

.PARAMETER fileFilter
A file filter string (e.g., "*.xml") to limit which files are checked.

.OUTPUTS
Writes information about files exceeding age thresholds to the console.
#>
function Check-FileAge {
    param (
        [string]$path,
        [array]$timeThresholds,
        [string]$fileFilter
    )

    # Get all files in the directory that match the filter
    $files = Get-ChildItem -Path $path -File -Filter $fileFilter

    # Check each file against the time thresholds
    foreach ($file in $files) {
        $fileAge = (Get-Date) - $file.LastWriteTime
        $ageInMinutes = $fileAge.TotalMinutes

        $breachedThresholds = @()
        foreach ($threshold in $timeThresholds) {
            if ($ageInMinutes -ge $threshold.minutes) {
                $breachedThresholds += $threshold
            }
        }

        # If any thresholds were breached for this file, report the details
        if ($breachedThresholds.Count -gt 0) {
            $highestSeverity = ($breachedThresholds | Sort-Object severity | Select-Object -First 1).severity
            $longestTime = ($breachedThresholds | Sort-Object minutes -Descending | Select-Object -First 1).minutes
            
            Write-Output "File: $($file.Name) in $path"
            Write-Output "  Age: $($ageInMinutes.ToString('F2')) minutes"
            Write-Output "  Highest Time Severity: $highestSeverity (Threshold: $longestTime minutes)"
            
            $breachedThresholds | ForEach-Object {
                Write-Output "  Breached: $($_.minutes) minutes (Severity: $($_.severity))"
            }
            Write-Output ""
        }
    }
}

<#
.SYNOPSIS
Checks for zero-size files in a directory.

.DESCRIPTION
This function identifies any files with zero size in the specified directory that match the given file filter
and reports them along with the specified severity level.

.PARAMETER path
The directory path to check.

.PARAMETER zeroSizeSeverity
The severity level to assign to zero-size file findings.

.PARAMETER fileFilter
A file filter string (e.g., "*.xml") to limit which files are checked.

.OUTPUTS
Writes information about zero-size files to the console and returns the count of such files.
#>
function Check-ZeroSizeFiles {
    param (
        [string]$path,
        [int]$zeroSizeSeverity,
        [string]$fileFilter
    )

    # Find all zero-size files in the directory that match the filter
    $zeroSizeFiles = Get-ChildItem -Path $path -File -Filter $fileFilter | Where-Object { $_.Length -eq 0 }

    # If any zero-size files were found, report them
    if ($zeroSizeFiles.Count -gt 0) {
        Write-Output "Zero-size files found in $path (Filter: $fileFilter) (Severity: $zeroSizeSeverity):"
        $zeroSizeFiles | ForEach-Object {
            Write-Output "  $($_.Name)"
        }
        Write-Output ""
    }

    return $zeroSizeFiles.Count
}

<#
.SYNOPSIS
Performs comprehensive checks on a directory.

.DESCRIPTION
This function orchestrates all the individual checks (file count, file age, zero-size files)
for a given directory based on the provided parameters and file filter.

.PARAMETER path
The directory path to check.

.PARAMETER timeThresholds
An array of time threshold objects for file age checks.

.PARAMETER countThresholds
An array of count threshold objects for file count checks.

.PARAMETER checkZeroSize
A boolean indicating whether to perform zero-size file checks.

.PARAMETER zeroSizeSeverity
The severity level to assign to zero-size file findings.

.PARAMETER fileFilter
A file filter string (e.g., "*.xml") to limit which files are checked.

.OUTPUTS
Writes comprehensive check results to the console.
#>
function Check-Directory {
    param (
        [string]$path,
        [array]$timeThresholds,
        [array]$countThresholds,
        [bool]$checkZeroSize,
        [int]$zeroSizeSeverity,
        [string]$fileFilter
    )

    Write-Output "Checking directory: $path (Filter: $fileFilter)"

    # Perform file count check
    $fileCount = Check-FileCount -path $path -countThresholds $countThresholds -fileFilter $fileFilter

    # Perform file age check
    Check-FileAge -path $path -timeThresholds $timeThresholds -fileFilter $fileFilter

    # Perform zero-size file check if enabled
    if ($checkZeroSize) {
        $zeroSizeCount = Check-ZeroSizeFiles -path $path -zeroSizeSeverity $zeroSizeSeverity -fileFilter $fileFilter
        Write-Output "Zero-size files found: $zeroSizeCount"
    }

    Write-Output "Total files matching filter in $path: $fileCount"
    Write-Output "-----------------------------"
}

# Main execution loop
# Iterate through each directory specified in the configuration and perform checks
foreach ($dir in $config.directory_check) {
    Check-Directory -path $dir.path `
                    -timeThresholds $dir.time_thresholds `
                    -countThresholds $dir.count_thresholds `
                    -checkZeroSize $dir.check_zero_size `
                    -zeroSizeSeverity $dir.zero_size_severity `
                    -fileFilter $dir.file_filter
}
